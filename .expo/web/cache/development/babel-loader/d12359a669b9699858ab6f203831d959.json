{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useEffect } from \"react\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport Animated, { useSharedValue, useAnimatedStyle, withTiming, Easing, withDelay, useDerivedValue } from \"react-native-reanimated\";\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\nimport { adjustLetterDisplay } from \"../../../utils/adjustLetterDisplay\";\nimport { colors, SIZE } from \"../../../utils/constants\";\nimport interpolateColorBugFix from \"../../../utils/interpolateColorFix\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar LetterSquare = function LetterSquare(_ref) {\n  var guess = _ref.guess,\n      letter = _ref.letter,\n      idx = _ref.idx;\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.gameState;\n  }),\n      currentGuessIndex = _useAppSelector.currentGuessIndex,\n      wrongGuessShake = _useAppSelector.wrongGuessShake,\n      gameLanguage = _useAppSelector.gameLanguage;\n\n  var scale = useSharedValue(1);\n  var rotateDegree = useSharedValue(0);\n  var progress = useDerivedValue(function () {\n    var _f = function _f() {\n      return guess.isComplete ? withDelay(250 * idx, withTiming(1)) : withDelay(250 * idx, withTiming(0));\n    };\n\n    _f._closure = {\n      guess: {\n        isComplete: guess.isComplete\n      },\n      withDelay: withDelay,\n      idx: idx,\n      withTiming: withTiming\n    };\n    _f.asString = \"function _f(){const{guess,withDelay,idx,withTiming}=jsThis._closure;{return guess.isComplete?withDelay(250*idx,withTiming(1)):withDelay(250*idx,withTiming(0));}}\";\n    _f.__workletHash = 6243494116627;\n    _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\screens\\\\game\\\\components\\\\letterSquare.tsx (33:35)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), [guess]);\n  var shakeX = useSharedValue(0);\n  var matchStatus = guess.matches[idx];\n\n  var matchColor = function () {\n    var _f = function _f() {\n      switch (matchStatus) {\n        case \"correct\":\n          return colors.correct;\n\n        case \"present\":\n          return colors.present;\n\n        case \"absent\":\n          return colors.absent;\n\n        case \"\":\n          return colors.keyDefault;\n\n        default:\n          return colors.keyDefault;\n      }\n    };\n\n    _f._closure = {\n      matchStatus: matchStatus,\n      colors: {\n        correct: colors.correct,\n        present: colors.present,\n        absent: colors.absent,\n        keyDefault: colors.keyDefault\n      }\n    };\n    _f.asString = \"function matchColor(){const{matchStatus,colors}=jsThis._closure;{switch(matchStatus){case\\\"correct\\\":return colors.correct;case\\\"present\\\":return colors.present;case\\\"absent\\\":return colors.absent;case\\\"\\\":return colors.keyDefault;default:return colors.keyDefault;}}}\";\n    _f.__workletHash = 5924929816519;\n    _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\screens\\\\game\\\\components\\\\letterSquare.tsx (43:2)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }();\n\n  var bgStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      var colorByMatch = matchColor();\n      var backgroundColor = interpolateColorBugFix(progress.value, [0, 1], [colors.keyDefault, colorByMatch]);\n      return {\n        backgroundColor: backgroundColor\n      };\n    };\n\n    _f._closure = {\n      matchColor: matchColor,\n      interpolateColorBugFix: interpolateColorBugFix,\n      progress: progress,\n      colors: {\n        keyDefault: colors.keyDefault\n      }\n    };\n    _f.asString = \"function _f(){const{matchColor,interpolateColorBugFix,progress,colors}=jsThis._closure;{const colorByMatch=matchColor();const backgroundColor=interpolateColorBugFix(progress.value,[0,1],[colors.keyDefault,colorByMatch]);return{backgroundColor:backgroundColor};}}\";\n    _f.__workletHash = 15683953405443;\n    _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\screens\\\\game\\\\components\\\\letterSquare.tsx (59:35)\";\n    _f.__optimalization = 2;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var animatedStyles = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: [{\n          scale: scale.value\n        }, {\n          rotateY: rotateDegree.value + \"deg\"\n        }, {\n          translateX: shakeX.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      scale: scale,\n      rotateDegree: rotateDegree,\n      shakeX: shakeX\n    };\n    _f.asString = \"function _f(){const{scale,rotateDegree,shakeX}=jsThis._closure;{return{transform:[{scale:scale.value},{rotateY:rotateDegree.value+\\\"deg\\\"},{translateX:shakeX.value}]};}}\";\n    _f.__workletHash = 3987562688050;\n    _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\screens\\\\game\\\\components\\\\letterSquare.tsx (70:42)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  useEffect(function () {\n    if (letter !== \"\" && matchStatus === \"\") {\n      scale.value = withTiming(1.2, {\n        duration: 50,\n        easing: Easing.bezier(0.25, 0.1, 0.25, 1)\n      });\n      Vibration.vibrate(1);\n      scale.value = withDelay(50, withTiming(1));\n    }\n\n    if (matchStatus !== \"\") {\n      rotateDegree.value = withDelay(250 * idx, withTiming(90, {\n        duration: 250\n      }));\n      rotateDegree.value = withDelay(250 * (idx + 1), withTiming(0, {\n        duration: 250\n      }));\n    }\n  }, [letter, matchStatus]);\n  useEffect(function () {\n    if (wrongGuessShake && currentGuessIndex === guess.id) {\n      for (var i = 1; i < 6; i++) {\n        shakeX.value = withDelay(10 * i, withTiming(-5, {\n          duration: 15,\n          easing: Easing.linear\n        }));\n        shakeX.value = withDelay(20 * i, withTiming(6, {\n          duration: 30,\n          easing: Easing.linear\n        }));\n        shakeX.value = withDelay(30 * i, withTiming(-8, {\n          duration: 45,\n          easing: Easing.linear\n        }));\n        shakeX.value = withDelay(40 * i, withTiming(0, {\n          duration: 60,\n          easing: Easing.linear\n        }));\n      }\n    }\n  }, [wrongGuessShake]);\n  return _jsx(Animated.View, {\n    style: [_objectSpread(_objectSpread({}, styles.square), {}, {\n      backgroundColor: matchColor(),\n      borderWidth: guess.isComplete ? 0 : 1\n    }), animatedStyles, bgStyle],\n    children: _jsx(Text, {\n      style: _objectSpread(_objectSpread({}, styles.letter), {}, {\n        color: colors.white\n      }),\n      children: adjustLetterDisplay(letter, gameLanguage)\n    })\n  }, idx);\n};\n\nexport default LetterSquare;\nvar styles = StyleSheet.create({\n  square: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: SIZE / 8,\n    height: SIZE / 8,\n    borderRadius: 10\n  },\n  letter: {\n    fontSize: SIZE / 12,\n    fontWeight: \"bold\",\n    fontFamily: \"Montserrat_800ExtraBold\",\n    textTransform: \"uppercase\"\n  }\n});","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/screens/game/components/letterSquare.tsx"],"names":["useEffect","React","Animated","useSharedValue","useAnimatedStyle","withTiming","Easing","withDelay","useDerivedValue","useAppSelector","adjustLetterDisplay","colors","SIZE","interpolateColorBugFix","LetterSquare","guess","letter","idx","state","gameState","currentGuessIndex","wrongGuessShake","gameLanguage","scale","rotateDegree","progress","isComplete","shakeX","matchStatus","matches","matchColor","correct","present","absent","keyDefault","bgStyle","colorByMatch","backgroundColor","value","animatedStyles","transform","rotateY","translateX","duration","easing","bezier","Vibration","vibrate","id","i","linear","styles","square","borderWidth","color","white","StyleSheet","create","display","alignItems","justifyContent","width","height","borderRadius","fontSize","fontWeight","fontFamily","textTransform"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport { StyleSheet, Text, Vibration } from \"react-native\";\r\nimport Animated, {\r\n  useSharedValue,\r\n  useAnimatedStyle,\r\n  withTiming,\r\n  Easing,\r\n  withDelay,\r\n  useDerivedValue,\r\n  // eslint-disable-next-line\r\n} from \"react-native-reanimated\";\r\n\r\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { guess } from \"../../../types\";\r\nimport { adjustLetterDisplay } from \"../../../utils/adjustLetterDisplay\";\r\nimport { colors, SIZE } from \"../../../utils/constants\";\r\nimport interpolateColorBugFix from \"../../../utils/interpolateColorFix\";\r\n\r\ninterface LetterSquareProps {\r\n  guess: guess;\r\n  letter: string;\r\n  idx: number;\r\n}\r\n\r\nconst LetterSquare = ({ guess, letter, idx }: LetterSquareProps) => {\r\n  const { currentGuessIndex, wrongGuessShake, gameLanguage } = useAppSelector(\r\n    (state) => state.gameState\r\n  );\r\n  const scale = useSharedValue(1);\r\n  const rotateDegree = useSharedValue(0);\r\n  const progress = useDerivedValue(() => {\r\n    return guess.isComplete\r\n      ? withDelay(250 * idx, withTiming(1))\r\n      : withDelay(250 * idx, withTiming(0));\r\n  }, [guess]);\r\n  const shakeX = useSharedValue(0);\r\n  const matchStatus = guess.matches[idx];\r\n\r\n  //condition for changing colors when guess\r\n\r\n  function matchColor() {\r\n    \"worklet\";\r\n    switch (matchStatus) {\r\n      case \"correct\":\r\n        return colors.correct;\r\n      case \"present\":\r\n        return colors.present;\r\n      case \"absent\":\r\n        return colors.absent;\r\n      case \"\":\r\n        return colors.keyDefault;\r\n      default:\r\n        return colors.keyDefault;\r\n    }\r\n  }\r\n  //changing background color on progress\r\n  const bgStyle = useAnimatedStyle(() => {\r\n    const colorByMatch = matchColor();\r\n    const backgroundColor = interpolateColorBugFix(\r\n      progress.value,\r\n      [0, 1],\r\n      [colors.keyDefault, colorByMatch]\r\n    );\r\n\r\n    return { backgroundColor };\r\n  });\r\n  // animation function of box when guess correct\r\n  const animatedStyles = useAnimatedStyle(() => {\r\n    return {\r\n      transform: [\r\n        { scale: scale.value },\r\n        { rotateY: `${rotateDegree.value}deg` },\r\n        { translateX: shakeX.value },\r\n      ],\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (letter !== \"\" && matchStatus === \"\") {\r\n      scale.value = withTiming(1.2, {\r\n        duration: 50,\r\n        easing: Easing.bezier(0.25, 0.1, 0.25, 1),\r\n      });\r\n      Vibration.vibrate(1);\r\n      scale.value = withDelay(50, withTiming(1));\r\n    }\r\n    if (matchStatus !== \"\") {\r\n      rotateDegree.value = withDelay(\r\n        250 * idx,\r\n        withTiming(90, {\r\n          duration: 250,\r\n        })\r\n      );\r\n      rotateDegree.value = withDelay(\r\n        250 * (idx + 1),\r\n        withTiming(0, {\r\n          duration: 250,\r\n        })\r\n      );\r\n    }\r\n  }, [letter, matchStatus]);\r\n\r\n  useEffect(() => {\r\n    if (wrongGuessShake && currentGuessIndex === guess.id) {\r\n      for (let i = 1; i < 6; i++) {\r\n        shakeX.value = withDelay(\r\n          10 * i,\r\n          withTiming(-5, {\r\n            duration: 15,\r\n            easing: Easing.linear,\r\n          })\r\n        );\r\n        shakeX.value = withDelay(\r\n          20 * i,\r\n          withTiming(6, {\r\n            duration: 30,\r\n            easing: Easing.linear,\r\n          })\r\n        );\r\n        shakeX.value = withDelay(\r\n          30 * i,\r\n          withTiming(-8, {\r\n            duration: 45,\r\n            easing: Easing.linear,\r\n          })\r\n        );\r\n        shakeX.value = withDelay(\r\n          40 * i,\r\n          withTiming(0, {\r\n            duration: 60,\r\n            easing: Easing.linear,\r\n          })\r\n        );\r\n      }\r\n    }\r\n  }, [wrongGuessShake]);\r\n\r\n  return (\r\n    <Animated.View\r\n      key={idx}\r\n      style={[\r\n        {\r\n          ...styles.square,\r\n          backgroundColor: matchColor(),\r\n          borderWidth: guess.isComplete ? 0 : 1,\r\n        },\r\n        animatedStyles,\r\n        bgStyle,\r\n      ]}\r\n    >\r\n      <Text\r\n        style={{\r\n          ...styles.letter,\r\n          color: colors.white,\r\n        }}\r\n      >\r\n        {adjustLetterDisplay(letter, gameLanguage)}\r\n      </Text>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nexport default LetterSquare;\r\n\r\nconst styles = StyleSheet.create({\r\n  square: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: SIZE / 8,\r\n    height: SIZE / 8,\r\n    borderRadius: 10,\r\n  },\r\n  letter: {\r\n    fontSize: SIZE / 12,\r\n    fontWeight: \"bold\",\r\n    fontFamily: \"Montserrat_800ExtraBold\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}