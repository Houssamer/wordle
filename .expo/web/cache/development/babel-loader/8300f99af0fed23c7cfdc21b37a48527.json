{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\nimport { adjustLetterDisplay } from \"../../../utils/adjustLetterDisplay\";\nimport { colors, SIZE } from \"../../../utils/constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar keysEN = [[\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"], [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"], [\"Enter\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\"]];\nvar keysTR = [[\"e\", \"r\", \"t\", \"y\", \"u\", \"ı\", \"o\", \"p\", \"ğ\", \"ü\"], [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"ş\", \"i\"], [\"Enter\", \"z\", \"c\", \"v\", \"b\", \"n\", \"m\", \"ö\", \"ç\", \"<\"]];\nexport default function Keyboard(_ref) {\n  var handleGuess = _ref.handleGuess;\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.gameState;\n  }),\n      usedKeys = _useAppSelector.usedKeys,\n      gameLanguage = _useAppSelector.gameLanguage;\n\n  var keyboard = gameLanguage === \"en\" ? keysEN : keysTR;\n\n  var handleKeyboardKeyColor = function handleKeyboardKeyColor(key) {\n    var keyData = usedKeys[key];\n\n    if (keyData) {\n      if (keyData === \"correct\") {\n        return colors.correct;\n      } else if (keyData === \"present\") {\n        return colors.present;\n      } else if (keyData === \"absent\") {\n        return colors.absent;\n      } else return colors.keyDefault;\n    } else return colors.keyDefault;\n  };\n\n  return _jsx(View, {\n    style: styles.keyboardContainer,\n    children: keyboard.map(function (keysRow, idx) {\n      return _jsx(View, {\n        style: _objectSpread(_objectSpread({}, styles.keyboardRow), {}, {\n          width: idx === 1 ? SIZE * 0.95 : SIZE\n        }),\n        children: keysRow.map(function (keyboardKey) {\n          var keyRowCount = keysRow.length + 2;\n          return _jsx(TouchableOpacity, {\n            style: _objectSpread(_objectSpread({}, styles.keyContainer), {}, {\n              backgroundColor: handleKeyboardKeyColor(keyboardKey),\n              height: SIZE / keyRowCount + 2 + 20,\n              flex: keyboardKey === \"<\" || keyboardKey === \"Enter\" ? 2 : 1\n            }),\n            onPress: function onPress() {\n              return handleGuess(keyboardKey);\n            },\n            children: keyboardKey === \"<\" ? _jsx(Ionicons, {\n              name: \"backspace-outline\",\n              style: _objectSpread(_objectSpread({}, styles.keyboardKey), {}, {\n                fontSize: 28\n              })\n            }) : _jsx(Text, {\n              style: _objectSpread(_objectSpread({}, styles.keyboardKey), {}, {\n                fontSize: keyboardKey === \"Enter\" ? 12 : 18\n              }),\n              children: adjustLetterDisplay(keyboardKey, gameLanguage)\n            })\n          }, keyboardKey);\n        })\n      }, idx);\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  keyboardContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 30\n  },\n  keyboardRow: {\n    width: SIZE,\n    marginBottom: 5,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  keyContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    margin: 2,\n    borderRadius: 5\n  },\n  keyboardKey: {\n    textTransform: \"uppercase\",\n    color: \"white\",\n    fontFamily: \"Montserrat_800ExtraBold\"\n  }\n});","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/screens/game/components/keyboard.tsx"],"names":["React","Ionicons","useAppSelector","adjustLetterDisplay","colors","SIZE","keysEN","keysTR","Keyboard","handleGuess","state","gameState","usedKeys","gameLanguage","keyboard","handleKeyboardKeyColor","key","keyData","correct","present","absent","keyDefault","styles","keyboardContainer","map","keysRow","idx","keyboardRow","width","keyboardKey","keyRowCount","length","keyContainer","backgroundColor","height","flex","fontSize","StyleSheet","create","display","alignItems","marginBottom","flexDirection","justifyContent","margin","borderRadius","textTransform","color","fontFamily"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\r\n\r\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { adjustLetterDisplay } from \"../../../utils/adjustLetterDisplay\";\r\nimport { colors, SIZE } from \"../../../utils/constants\";\r\n\r\n//keyboard functions or buttons\r\nconst keysEN: string[][] = [\r\n  [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\r\n  [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"],\r\n  [\"Enter\", \"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\"],\r\n];\r\n\r\nconst keysTR: string[][] = [\r\n  [\"e\", \"r\", \"t\", \"y\", \"u\", \"ı\", \"o\", \"p\", \"ğ\", \"ü\"],\r\n  [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"ş\", \"i\"],\r\n  [\"Enter\", \"z\", \"c\", \"v\", \"b\", \"n\", \"m\", \"ö\", \"ç\", \"<\"],\r\n];\r\n\r\ninterface KeyboardProps {\r\n  handleGuess: (keyPressed: string) => void;\r\n}\r\n\r\nexport default function Keyboard({ handleGuess }: KeyboardProps) {\r\n  const { usedKeys, gameLanguage } = useAppSelector((state) => state.gameState);\r\n  const keyboard = gameLanguage === \"en\" ? keysEN : keysTR;\r\n\r\n  //changing keys colors when guess correct\r\n\r\n  const handleKeyboardKeyColor = (key: string) => {\r\n    const keyData = usedKeys[key];\r\n    if (keyData) {\r\n      if (keyData === \"correct\") {\r\n        return colors.correct;\r\n      } else if (keyData === \"present\") {\r\n        return colors.present;\r\n      } else if (keyData === \"absent\") {\r\n        return colors.absent;\r\n      } else return colors.keyDefault;\r\n    } else return colors.keyDefault;\r\n  };\r\n  return (\r\n    <View style={styles.keyboardContainer}>\r\n      {keyboard.map((keysRow, idx) => (\r\n        <View\r\n          key={idx}\r\n          style={{\r\n            ...styles.keyboardRow,\r\n            width: idx === 1 ? SIZE * 0.95 : SIZE,\r\n          }}\r\n        >\r\n          {keysRow.map((keyboardKey) => {\r\n            const keyRowCount = keysRow.length + 2;\r\n            return (\r\n              <TouchableOpacity\r\n                key={keyboardKey}\r\n                style={{\r\n                  ...styles.keyContainer,\r\n                  backgroundColor: handleKeyboardKeyColor(keyboardKey),\r\n                  height: SIZE / keyRowCount + 2 + 20,\r\n                  flex: keyboardKey === \"<\" || keyboardKey === \"Enter\" ? 2 : 1,\r\n                }}\r\n                onPress={() => handleGuess(keyboardKey)}\r\n              >\r\n                {keyboardKey === \"<\" ? (\r\n                  <Ionicons\r\n                    name=\"backspace-outline\"\r\n                    style={{ ...styles.keyboardKey, fontSize: 28 }}\r\n                  />\r\n                ) : (\r\n                  <Text\r\n                    style={{\r\n                      ...styles.keyboardKey,\r\n                      fontSize: keyboardKey === \"Enter\" ? 12 : 18,\r\n                    }}\r\n                  >\r\n                    {adjustLetterDisplay(keyboardKey, gameLanguage)}\r\n                  </Text>\r\n                )}\r\n              </TouchableOpacity>\r\n            );\r\n          })}\r\n        </View>\r\n      ))}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  keyboardContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginBottom: 30,\r\n  },\r\n  keyboardRow: {\r\n    width: SIZE,\r\n    marginBottom: 5,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  keyContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    margin: 2,\r\n\r\n    borderRadius: 5,\r\n  },\r\n  keyboardKey: {\r\n    textTransform: \"uppercase\",\r\n    color: \"white\",\r\n    fontFamily: \"Montserrat_800ExtraBold\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}