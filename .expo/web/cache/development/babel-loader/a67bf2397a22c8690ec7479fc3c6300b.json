{"ast":null,"code":"import { interpolate } from 'react-native-reanimated';\n\nvar hexToRGBA = function () {\n  var _f = function _f(hw) {\n    if (hw.length === 4) {\n      return {\n        r: parseInt(hw.substr(1, 1), 16),\n        g: parseInt(hw.substr(2, 1), 16),\n        b: parseInt(hw.substr(3, 1), 16),\n        a: 1\n      };\n    }\n\n    var r = parseInt(hw.slice(1, 3), 16);\n    var g = parseInt(hw.slice(3, 5), 16);\n    var b = parseInt(hw.slice(5, 7), 16);\n    var a = hw.length === 9 ? parseInt(hw.slice(7, 9), 16) / 255 : 1;\n    return {\n      r: r,\n      g: g,\n      b: b,\n      a: a\n    };\n  };\n\n  _f._closure = {};\n  _f.asString = \"function hexToRGBA(hw){if(hw.length===4){return{r:parseInt(hw.substr(1,1),16),g:parseInt(hw.substr(2,1),16),b:parseInt(hw.substr(3,1),16),a:1};}const r=parseInt(hw.slice(1,3),16);const g=parseInt(hw.slice(3,5),16);const b=parseInt(hw.slice(5,7),16);const a=hw.length===9?parseInt(hw.slice(7,9),16)/255:1;return{r:r,g:g,b:b,a:a};}\";\n  _f.__workletHash = 15972590980848;\n  _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\utils\\\\interpolateColorFix.ts (6:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar colorToRGBA = function () {\n  var _f = function _f(color) {\n    if (typeof color === 'string') {\n      if (color.startsWith('rgba(')) {\n        var colorProcessed = color.split('(')[1].split(')')[0].split(',');\n        return {\n          r: parseInt(colorProcessed[0].trim()),\n          g: parseInt(colorProcessed[1].trim()),\n          b: parseInt(colorProcessed[2].trim()),\n          a: parseInt(colorProcessed[3].trim())\n        };\n      } else if (color.startsWith('rgb(')) {\n        var _colorProcessed = color.split('(')[1].split(')')[0].split(',');\n\n        return {\n          r: parseInt(_colorProcessed[0].trim()),\n          g: parseInt(_colorProcessed[1].trim()),\n          b: parseInt(_colorProcessed[2].trim()),\n          a: 1\n        };\n      } else {\n        return hexToRGBA(color);\n      }\n    } else {\n      return {\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: Object.keys(color).includes('a') ? color.a : 1\n      };\n    }\n  };\n\n  _f._closure = {\n    hexToRGBA: hexToRGBA\n  };\n  _f.asString = \"function colorToRGBA(color){const{hexToRGBA}=jsThis._closure;{if(typeof color==='string'){if(color.startsWith('rgba(')){const colorProcessed=color.split('(')[1].split(')')[0].split(',');return{r:parseInt(colorProcessed[0].trim()),g:parseInt(colorProcessed[1].trim()),b:parseInt(colorProcessed[2].trim()),a:parseInt(colorProcessed[3].trim())};}else if(color.startsWith('rgb(')){const colorProcessed=color.split('(')[1].split(')')[0].split(',');return{r:parseInt(colorProcessed[0].trim()),g:parseInt(colorProcessed[1].trim()),b:parseInt(colorProcessed[2].trim()),a:1};}else{return hexToRGBA(color);}}else{return{r:color.r,g:color.g,b:color.b,a:Object.keys(color).includes('a')?color.a:1};}}}\";\n  _f.__workletHash = 16642280463512;\n  _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\utils\\\\interpolateColorFix.ts (29:0)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport default (function () {\n  var _f = function _f(value, inputRange, outputRange) {\n    var outputRangeProcessed = outputRange.map(function (i) {\n      return colorToRGBA(i);\n    });\n    var values = {\n      r: interpolate(value, inputRange, outputRangeProcessed.map(function (i) {\n        return i.r;\n      })),\n      g: interpolate(value, inputRange, outputRangeProcessed.map(function (i) {\n        return i.g;\n      })),\n      b: interpolate(value, inputRange, outputRangeProcessed.map(function (i) {\n        return i.b;\n      })),\n      a: interpolate(value, inputRange, outputRangeProcessed.map(function (i) {\n        return i.a;\n      }))\n    };\n    return \"rgba(\" + values.r + \",\" + values.g + \",\" + values.b + \", \" + values.a + \")\";\n  };\n\n  _f._closure = {\n    colorToRGBA: colorToRGBA,\n    interpolate: interpolate\n  };\n  _f.asString = \"function interpolateColorBugFix(value,inputRange,outputRange){const{colorToRGBA,interpolate}=jsThis._closure;{const outputRangeProcessed=outputRange.map(function(i){return colorToRGBA(i);});const values={r:interpolate(value,inputRange,outputRangeProcessed.map(function(i){return i.r;})),g:interpolate(value,inputRange,outputRangeProcessed.map(function(i){return i.g;})),b:interpolate(value,inputRange,outputRangeProcessed.map(function(i){return i.b;})),a:interpolate(value,inputRange,outputRangeProcessed.map(function(i){return i.a;}))};return\\\"rgba(\\\"+values.r+\\\",\\\"+values.g+\\\",\\\"+values.b+\\\", \\\"+values.a+\\\")\\\";}}\";\n  _f.__workletHash = 11865847807272;\n  _f.__location = \"D:\\\\fiverr\\\\projet15\\\\wordle\\\\src\\\\utils\\\\interpolateColorFix.ts (66:15)\";\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n})();","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/utils/interpolateColorFix.ts"],"names":["interpolate","hexToRGBA","hw","length","r","parseInt","substr","g","b","a","slice","colorToRGBA","color","startsWith","colorProcessed","split","trim","Object","keys","includes","value","inputRange","outputRange","outputRangeProcessed","map","i","values"],"mappings":"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","sourcesContent":["// https://github.com/software-mansion/react-native-reanimated/issues/2826#issue-1099818705\r\n/* eslint-disable */\r\n// @ts-nocheck\r\nimport { interpolate } from 'react-native-reanimated';\r\n\r\nfunction hexToRGBA(hw: string) {\r\n  'worklet';\r\n  if (hw.length === 4) {\r\n    return {\r\n      r: parseInt(hw.substr(1, 1), 16),\r\n      g: parseInt(hw.substr(2, 1), 16),\r\n      b: parseInt(hw.substr(3, 1), 16),\r\n      a: 1,\r\n    };\r\n  }\r\n  const r = parseInt(hw.slice(1, 3), 16);\r\n  const g = parseInt(hw.slice(3, 5), 16);\r\n  const b = parseInt(hw.slice(5, 7), 16);\r\n  const a = hw.length === 9 ? parseInt(hw.slice(7, 9), 16) / 255 : 1;\r\n\r\n  return {\r\n    r,\r\n    g,\r\n    b,\r\n    a,\r\n  };\r\n}\r\n\r\nfunction colorToRGBA(\r\n  color:\r\n    | string\r\n    | { r: number; g: number; b: number }\r\n    | { r: number; g: number; b: number; a: number }\r\n) {\r\n  'worklet';\r\n  if (typeof color === 'string') {\r\n    if (color.startsWith('rgba(')) {\r\n      const colorProcessed = color.split('(')[1].split(')')[0].split(',');\r\n      return {\r\n        r: parseInt(colorProcessed[0].trim()),\r\n        g: parseInt(colorProcessed[1].trim()),\r\n        b: parseInt(colorProcessed[2].trim()),\r\n        a: parseInt(colorProcessed[3].trim()),\r\n      };\r\n    } else if (color.startsWith('rgb(')) {\r\n      const colorProcessed = color.split('(')[1].split(')')[0].split(',');\r\n      return {\r\n        r: parseInt(colorProcessed[0].trim()),\r\n        g: parseInt(colorProcessed[1].trim()),\r\n        b: parseInt(colorProcessed[2].trim()),\r\n        a: 1,\r\n      };\r\n    } else {\r\n      return hexToRGBA(color);\r\n    }\r\n  } else {\r\n    return {\r\n      r: color.r,\r\n      g: color.g,\r\n      b: color.b,\r\n      a: Object.keys(color).includes('a') ? color.a : 1,\r\n    };\r\n  }\r\n}\r\n\r\nexport default function interpolateColorBugFix(\r\n  value: number,\r\n  inputRange:  number[],\r\n  outputRange: readonly (string | number)[]\r\n) {\r\n  'worklet';\r\n  const outputRangeProcessed = outputRange.map((i) => colorToRGBA(i as string));\r\n  const values = {\r\n    r: interpolate(\r\n      value,\r\n      inputRange,\r\n      outputRangeProcessed.map((i) => i.r)\r\n    ),\r\n    g: interpolate(\r\n      value,\r\n      inputRange,\r\n      outputRangeProcessed.map((i) => i.g)\r\n    ),\r\n    b: interpolate(\r\n      value,\r\n      inputRange,\r\n      outputRangeProcessed.map((i) => i.b)\r\n    ),\r\n    a: interpolate(\r\n      value,\r\n      inputRange,\r\n      outputRangeProcessed.map((i) => i.a)\r\n    ),\r\n  };\r\n  return `rgba(${values.r},${values.g},${values.b}, ${values.a})`;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}