{"ast":null,"code":"import View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated, { FadeIn, FadeOut } from \"react-native-reanimated\";\nimport React from \"react\";\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\nimport { adjustTextDisplay } from \"../../../utils/adjustLetterDisplay\";\nimport { colors, HEIGHT, SIZE } from \"../../../utils/constants\";\nimport Keyboard from \"./keyboard\";\nimport LetterSquare from \"./letterSquare\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar GameBoard = function GameBoard(_ref) {\n  var solution = _ref.solution,\n      handleGuess = _ref.handleGuess,\n      resetGame = _ref.resetGame;\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.gameState;\n  }),\n      guesses = _useAppSelector.guesses,\n      gameEnded = _useAppSelector.gameEnded,\n      wrongGuessShake = _useAppSelector.wrongGuessShake,\n      gameLanguage = _useAppSelector.gameLanguage;\n\n  return _jsxs(View, {\n    style: styles.board,\n    children: [_jsx(View, {\n      style: styles.blocksContainer,\n      children: guesses.map(function (guess, idx) {\n        return _jsx(View, {\n          style: styles.squareBlock,\n          children: guess.letters.map(function (letter, idx) {\n            return _jsx(LetterSquare, {\n              idx: idx,\n              letter: letter,\n              guess: guess\n            }, idx);\n          })\n        }, idx);\n      })\n    }), _jsxs(View, {\n      style: styles.gameResult,\n      children: [gameEnded && _jsxs(_Fragment, {\n        children: [_jsxs(Text, {\n          style: styles.solutionText,\n          children: [\"Solution: \", adjustTextDisplay(solution, gameLanguage)]\n        }), _jsx(TouchableOpacity, {\n          style: styles.resetButton,\n          onPress: function onPress() {\n            return resetGame();\n          },\n          children: _jsx(Text, {\n            style: styles.resetButtonText,\n            children: \"New Game\"\n          })\n        })]\n      }), wrongGuessShake && _jsx(Animated.Text, {\n        entering: FadeIn,\n        exiting: FadeOut,\n        style: styles.wrongGuessText,\n        children: \"Not in word list\"\n      })]\n    }), _jsx(Keyboard, {\n      handleGuess: handleGuess\n    })]\n  });\n};\n\nexport default GameBoard;\nvar styles = StyleSheet.create({\n  board: {\n    width: SIZE,\n    height: HEIGHT,\n    backgroundColor: colors.bg,\n    alignItems: \"center\",\n    marginTop: 50\n  },\n  squareBlock: {\n    width: SIZE * 0.9,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    marginBottom: 10\n  },\n  blocksContainer: {\n    width: SIZE * 0.9,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\"\n  },\n  gameResult: {\n    width: SIZE,\n    height: 50,\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\"\n  },\n  resetButton: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: 170,\n    height: 40,\n    borderRadius: 10,\n    backgroundColor: \"#404040\"\n  },\n  resetButtonText: {\n    fontFamily: \"Montserrat_700Bold\",\n    fontSize: 20,\n    color: \"#fff\"\n  },\n  solutionText: {\n    fontSize: 16,\n    fontFamily: \"Montserrat_600SemiBold\",\n    color: \"#fff\",\n    textTransform: \"uppercase\"\n  },\n  wrongGuessText: {\n    fontFamily: \"Montserrat_600SemiBold\",\n    fontSize: 16,\n    color: colors.white\n  }\n});","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/screens/game/components/gameBoard.tsx"],"names":["Animated","FadeIn","FadeOut","React","useAppSelector","adjustTextDisplay","colors","HEIGHT","SIZE","Keyboard","LetterSquare","GameBoard","solution","handleGuess","resetGame","state","gameState","guesses","gameEnded","wrongGuessShake","gameLanguage","styles","board","blocksContainer","map","guess","idx","squareBlock","letters","letter","gameResult","solutionText","resetButton","resetButtonText","wrongGuessText","StyleSheet","create","width","height","backgroundColor","bg","alignItems","marginTop","display","flexDirection","justifyContent","marginBottom","borderRadius","fontFamily","fontSize","color","textTransform","white"],"mappings":";;;;AAEA,OAAOA,QAAP,IAAmBC,MAAnB,EAA2BC,OAA3B,QAA0C,yBAA1C;AAEA,OAAOC,KAAP,MAAiC,OAAjC;AAEA,SAASC,cAAT;AACA,SAASC,iBAAT;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,IAAzB;AAIA,OAAOC,QAAP;AACA,OAAOC,YAAP;;;;;AAQA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAA0D;AAAA,MAAvDC,QAAuD,QAAvDA,QAAuD;AAAA,MAA7CC,WAA6C,QAA7CA,WAA6C;AAAA,MAAhCC,SAAgC,QAAhCA,SAAgC;;AAC1E,wBAA8DV,cAAc,CAC1E,UAACW,KAAD;AAAA,WAAWA,KAAK,CAACC,SAAjB;AAAA,GAD0E,CAA5E;AAAA,MAAQC,OAAR,mBAAQA,OAAR;AAAA,MAAiBC,SAAjB,mBAAiBA,SAAjB;AAAA,MAA4BC,eAA5B,mBAA4BA,eAA5B;AAAA,MAA6CC,YAA7C,mBAA6CA,YAA7C;;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,KAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,eAApB;AAAA,gBACGN,OAAO,CAACO,GAAR,CAAY,UAACC,KAAD,EAAQC,GAAR;AAAA,eACX,KAAC,IAAD;AAAgB,UAAA,KAAK,EAAEL,MAAM,CAACM,WAA9B;AAAA,oBACGF,KAAK,CAACG,OAAN,CAAcJ,GAAd,CAAkB,UAACK,MAAD,EAASH,GAAT,EAAiB;AAClC,mBACE,KAAC,YAAD;AAEE,cAAA,GAAG,EAAEA,GAFP;AAGE,cAAA,MAAM,EAAEG,MAHV;AAIE,cAAA,KAAK,EAAEJ;AAJT,eACOC,GADP,CADF;AAQD,WATA;AADH,WAAWA,GAAX,CADW;AAAA,OAAZ;AADH,MADF,EAkBE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEL,MAAM,CAACS,UAApB;AAAA,iBACGZ,SAAS,IACR;AAAA,mBACE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEG,MAAM,CAACU,YAApB;AAAA,mCACa1B,iBAAiB,CAACO,QAAD,EAAWQ,YAAX,CAD9B;AAAA,UADF,EAIE,KAAC,gBAAD;AACE,UAAA,KAAK,EAAEC,MAAM,CAACW,WADhB;AAEE,UAAA,OAAO,EAAE;AAAA,mBAAMlB,SAAS,EAAf;AAAA,WAFX;AAAA,oBAIE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEO,MAAM,CAACY,eAApB;AAAA;AAAA;AAJF,UAJF;AAAA,QAFJ,EAeGd,eAAe,IACd,KAAC,QAAD,CAAU,IAAV;AACE,QAAA,QAAQ,EAAElB,MADZ;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,KAAK,EAAEmB,MAAM,CAACa,cAHhB;AAAA;AAAA,QAhBJ;AAAA,MAlBF,EA2CE,KAAC,QAAD;AAAU,MAAA,WAAW,EAAErB;AAAvB,MA3CF;AAAA,IADF;AA+CD,CApDD;;AAsDA,eAAeF,SAAf;AAEA,IAAMU,MAAM,GAAGc,UAAU,CAACC,MAAX,CAAkB;AAC/Bd,EAAAA,KAAK,EAAE;AACLe,IAAAA,KAAK,EAAE7B,IADF;AAEL8B,IAAAA,MAAM,EAAE/B,MAFH;AAGLgC,IAAAA,eAAe,EAAEjC,MAAM,CAACkC,EAHnB;AAILC,IAAAA,UAAU,EAAE,QAJP;AAMLC,IAAAA,SAAS,EAAE;AANN,GADwB;AAS/Bf,EAAAA,WAAW,EAAE;AACXU,IAAAA,KAAK,EAAE7B,IAAI,GAAG,GADH;AAEXmC,IAAAA,OAAO,EAAE,MAFE;AAGXC,IAAAA,aAAa,EAAE,KAHJ;AAIXH,IAAAA,UAAU,EAAE,QAJD;AAKXI,IAAAA,cAAc,EAAE,cALL;AAMXC,IAAAA,YAAY,EAAE;AANH,GATkB;AAiB/BvB,EAAAA,eAAe,EAAE;AACfc,IAAAA,KAAK,EAAE7B,IAAI,GAAG,GADC;AAEfmC,IAAAA,OAAO,EAAE,MAFM;AAGfC,IAAAA,aAAa,EAAE,QAHA;AAIfH,IAAAA,UAAU,EAAE,QAJG;AAKfI,IAAAA,cAAc,EAAE;AALD,GAjBc;AAwB/Bf,EAAAA,UAAU,EAAE;AACVO,IAAAA,KAAK,EAAE7B,IADG;AAEV8B,IAAAA,MAAM,EAAE,EAFE;AAGVK,IAAAA,OAAO,EAAE,MAHC;AAIVC,IAAAA,aAAa,EAAE,KAJL;AAKVH,IAAAA,UAAU,EAAE,QALF;AAMVI,IAAAA,cAAc,EAAE;AANN,GAxBmB;AAgC/Bb,EAAAA,WAAW,EAAE;AACXW,IAAAA,OAAO,EAAE,MADE;AAEXF,IAAAA,UAAU,EAAE,QAFD;AAGXI,IAAAA,cAAc,EAAE,QAHL;AAIXR,IAAAA,KAAK,EAAE,GAJI;AAKXC,IAAAA,MAAM,EAAE,EALG;AAMXS,IAAAA,YAAY,EAAE,EANH;AAOXR,IAAAA,eAAe,EAAE;AAPN,GAhCkB;AAyC/BN,EAAAA,eAAe,EAAE;AACfe,IAAAA,UAAU,EAAE,oBADG;AAEfC,IAAAA,QAAQ,EAAE,EAFK;AAGfC,IAAAA,KAAK,EAAE;AAHQ,GAzCc;AA8C/BnB,EAAAA,YAAY,EAAE;AACZkB,IAAAA,QAAQ,EAAE,EADE;AAEZD,IAAAA,UAAU,EAAE,wBAFA;AAGZE,IAAAA,KAAK,EAAE,MAHK;AAIZC,IAAAA,aAAa,EAAE;AAJH,GA9CiB;AAoD/BjB,EAAAA,cAAc,EAAE;AACdc,IAAAA,UAAU,EAAE,wBADE;AAEdC,IAAAA,QAAQ,EAAE,EAFI;AAGdC,IAAAA,KAAK,EAAE5C,MAAM,CAAC8C;AAHA;AApDe,CAAlB,CAAf","sourcesContent":["import { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\r\n// eslint-disable-next-line\r\nimport Animated, { FadeIn, FadeOut } from \"react-native-reanimated\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\r\nimport { adjustTextDisplay } from \"../../../utils/adjustLetterDisplay\";\r\nimport { colors, HEIGHT, SIZE } from \"../../../utils/constants\";\r\n\r\n//imported keyboard and letter square components\r\n\r\nimport Keyboard from \"./keyboard\";\r\nimport LetterSquare from \"./letterSquare\";\r\n\r\ninterface GameBoardProps {\r\n  solution: string;\r\n  handleGuess: (keyPressed: string) => void;\r\n  resetGame: () => void;\r\n}\r\n//function handle the state (guess, gameended ,gamelanguage)\r\nconst GameBoard = ({ solution, handleGuess, resetGame }: GameBoardProps) => {\r\n  const { guesses, gameEnded, wrongGuessShake, gameLanguage } = useAppSelector(\r\n    (state) => state.gameState\r\n  );\r\n\r\n  return (\r\n    <View style={styles.board}>\r\n      <View style={styles.blocksContainer}>\r\n        {guesses.map((guess, idx) => (\r\n          <View key={idx} style={styles.squareBlock}>\r\n            {guess.letters.map((letter, idx) => {\r\n              return (\r\n                <LetterSquare\r\n                  key={idx}\r\n                  idx={idx}\r\n                  letter={letter}\r\n                  guess={guess}\r\n                />\r\n              );\r\n            })}\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      <View style={styles.gameResult}>\r\n        {gameEnded && (\r\n          <>\r\n            <Text style={styles.solutionText}>\r\n              Solution: {adjustTextDisplay(solution, gameLanguage)}\r\n            </Text>\r\n            <TouchableOpacity\r\n              style={styles.resetButton}\r\n              onPress={() => resetGame()}\r\n            >\r\n              <Text style={styles.resetButtonText}>New Game</Text>\r\n            </TouchableOpacity>\r\n            \r\n          </>\r\n        )}\r\n        {wrongGuessShake && (\r\n          <Animated.Text\r\n            entering={FadeIn}\r\n            exiting={FadeOut}\r\n            style={styles.wrongGuessText}\r\n          >\r\n            Not in word list\r\n          </Animated.Text>\r\n        )}\r\n      </View>\r\n      <Keyboard handleGuess={handleGuess} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n\r\nconst styles = StyleSheet.create({\r\n  board: {\r\n    width: SIZE,\r\n    height: HEIGHT,\r\n    backgroundColor: colors.bg,\r\n    alignItems: \"center\",\r\n\r\n    marginTop: 50,\r\n  },\r\n  squareBlock: {\r\n    width: SIZE * 0.9,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n    marginBottom: 10,\r\n  },\r\n  blocksContainer: {\r\n    width: SIZE * 0.9,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n  gameResult: {\r\n    width: SIZE,\r\n    height: 50,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n  },\r\n  resetButton: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: 170,\r\n    height: 40,\r\n    borderRadius: 10,\r\n    backgroundColor: \"#404040\",\r\n  },\r\n  resetButtonText: {\r\n    fontFamily: \"Montserrat_700Bold\",\r\n    fontSize: 20,\r\n    color: \"#fff\",\r\n  },\r\n  solutionText: {\r\n    fontSize: 16,\r\n    fontFamily: \"Montserrat_600SemiBold\",\r\n    color: \"#fff\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  wrongGuessText: {\r\n    fontFamily: \"Montserrat_600SemiBold\",\r\n    fontSize: 16,\r\n    color: colors.white,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}