{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useRef } from 'react';\nimport React from 'react';\nimport AnimatedLottieView from 'lottie-react-native';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useAppSelector, useAppDispatch } from \"../../hooks/storeHooks\";\nimport { setCurrentGuessIndex, setGameWon, setSolution, setGuesses, setUsedKeys, setGameEnded, setWrongGuessShake, setGameStarted, setGameLanguage } from \"../../store/slices/gameStateSlice\";\nimport { HEIGHT, initialGuesses, SIZE } from \"../../utils/constants\";\nimport { getStoreData } from \"../../utils/localStorageFuncs\";\nimport { answersEN, answersTR, wordsEN, wordsTR } from \"../../words\";\nimport GameBoard from \"./components/gameBoard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Game() {\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.gameState;\n  }),\n      guesses = _useAppSelector.guesses,\n      usedKeys = _useAppSelector.usedKeys,\n      currentGuessIndex = _useAppSelector.currentGuessIndex,\n      gameStarted = _useAppSelector.gameStarted,\n      gameEnded = _useAppSelector.gameEnded,\n      gameWon = _useAppSelector.gameWon,\n      solution = _useAppSelector.solution,\n      gameLanguage = _useAppSelector.gameLanguage;\n\n  var dispatch = useAppDispatch();\n\n  (function _callee() {\n    var gameLanguage;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getStoreData('language'));\n\n          case 2:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.t0 = 'en';\n\n          case 5:\n            gameLanguage = _context.t0;\n            dispatch(setGameLanguage(gameLanguage));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  })();\n\n  var lottieRef = useRef(null);\n\n  var wordList = function wordList() {\n    switch (gameLanguage) {\n      case 'en':\n        return wordsEN.concat(answersEN);\n\n      case 'tr':\n        return wordsTR.concat(answersTR);\n\n      default:\n        return wordsEN.concat(answersEN);\n    }\n  };\n\n  var answers = function answers() {\n    switch (gameLanguage) {\n      case 'en':\n        return answersEN;\n\n      case 'tr':\n        return answersTR;\n\n      default:\n        return answersEN;\n    }\n  };\n\n  var handleFoundKeysOnKeyboard = function handleFoundKeysOnKeyboard(guess) {\n    var tempUsedKeys = _objectSpread({}, usedKeys);\n\n    guess.letters.forEach(function (letter, idx) {\n      var keyValue = tempUsedKeys[letter];\n\n      if (!keyValue) {\n        tempUsedKeys[letter] = guess.matches[idx];\n      } else {\n        if (keyValue === 'correct') return;else if (keyValue && guess.matches[idx] === 'correct') {\n          tempUsedKeys[letter] = 'correct';\n        } else if (keyValue === 'present' && guess.matches[idx] !== 'correct') return;else tempUsedKeys[letter] = guess.matches[idx];\n      }\n    });\n    dispatch(setUsedKeys(tempUsedKeys));\n  };\n\n  var checkGameEnd = function checkGameEnd() {\n    var attemptsCount = guesses.filter(function (guess) {\n      return guess.isComplete;\n    }).length;\n\n    if (attemptsCount === 6) {\n      dispatch(setGameEnded(true));\n    }\n  };\n\n  useEffect(function () {}, [currentGuessIndex]);\n\n  var updateGuess = function updateGuess(keyPressed, currentGuess) {\n    var currentGuessLetters = _toConsumableArray(currentGuess.letters);\n\n    var nextEmptyIndex = currentGuessLetters.findIndex(function (letter) {\n      return letter === '';\n    });\n    if (nextEmptyIndex === -1) nextEmptyIndex = 5;\n    var lastNonEmptyIndex = nextEmptyIndex - 1;\n\n    if (keyPressed !== '<' && keyPressed !== 'Enter' && nextEmptyIndex < 5) {\n      currentGuessLetters[nextEmptyIndex] = keyPressed;\n\n      var updatedGuess = _objectSpread(_objectSpread({}, currentGuess), {}, {\n        letters: currentGuessLetters\n      });\n\n      var updatedGuesses = guesses.map(function (guess, idx) {\n        if (idx === currentGuessIndex) return updatedGuess;else return guess;\n      });\n      dispatch(setGuesses(_toConsumableArray(updatedGuesses)));\n    } else if (keyPressed === '<') {\n      currentGuessLetters[lastNonEmptyIndex] = '';\n\n      var _updatedGuess = _objectSpread(_objectSpread({}, currentGuess), {}, {\n        letters: currentGuessLetters\n      });\n\n      var _updatedGuesses = guesses.map(function (guess, idx) {\n        if (idx === currentGuessIndex) return _updatedGuess;else return guess;\n      });\n\n      dispatch(setGuesses(_toConsumableArray(_updatedGuesses)));\n    }\n  };\n\n  var checkGuess = function checkGuess(currentGuess) {\n    var currentGuessedWord = currentGuess.letters.join('');\n\n    if (currentGuessedWord.length === 5) {\n      if (currentGuessedWord === solution) {\n        var matches = ['correct', 'correct', 'correct', 'correct', 'correct'];\n\n        var updatedGuess = _objectSpread(_objectSpread({}, currentGuess), {}, {\n          matches: matches,\n          isComplete: true,\n          isCorrect: true\n        });\n\n        var updatedGuesses = guesses.map(function (guess, idx) {\n          if (idx === currentGuessIndex) return updatedGuess;else return guess;\n        });\n        dispatch(setGuesses(updatedGuesses));\n        setTimeout(function () {\n          var _lottieRef$current;\n\n          (_lottieRef$current = lottieRef.current) == null ? void 0 : _lottieRef$current.play();\n          dispatch(setGameWon(true));\n          dispatch(setGameEnded(true));\n          handleFoundKeysOnKeyboard(updatedGuess);\n        }, 250 * 6);\n      } else if (wordList().includes(currentGuessedWord)) {\n        var _matches = [];\n        currentGuessedWord.split('').forEach(function (letter, index) {\n          var leftSlice = currentGuessedWord.slice(0, index + 1);\n          var countInLeft = leftSlice.split('').filter(function (item) {\n            return item === letter;\n          }).length;\n          var totalCount = solution.split('').filter(function (item) {\n            return item === letter;\n          }).length;\n          var nonMatchingPairs = solution.split('').filter(function (item, idx) {\n            return currentGuessedWord[idx] !== item;\n          });\n\n          if (letter === solution[index]) {\n            _matches.push('correct');\n          } else if (solution.includes(letter)) {\n            if (countInLeft <= totalCount && nonMatchingPairs.includes(letter)) {\n              _matches.push('present');\n            } else {\n              _matches.push('absent');\n            }\n          } else {\n            _matches.push('absent');\n          }\n        });\n\n        var _updatedGuess2 = _objectSpread(_objectSpread({}, currentGuess), {}, {\n          matches: _matches,\n          isComplete: true,\n          isCorrect: false\n        });\n\n        var _updatedGuesses2 = guesses.map(function (guess, idx) {\n          if (idx === currentGuessIndex) return _updatedGuess2;else return guess;\n        });\n\n        dispatch(setGuesses(_updatedGuesses2));\n        dispatch(setCurrentGuessIndex(currentGuessIndex + 1));\n        handleFoundKeysOnKeyboard(_updatedGuess2);\n      } else {\n        dispatch(setWrongGuessShake(true));\n        setTimeout(function () {\n          dispatch(setWrongGuessShake(false));\n        }, 1000);\n      }\n    }\n  };\n\n  var handleGuess = function handleGuess(keyPressed) {\n    if (!gameEnded) {\n      var currentGuess = guesses[currentGuessIndex];\n\n      if (currentGuess) {\n        if (keyPressed !== 'Enter' && !currentGuess.isComplete) {\n          updateGuess(keyPressed, currentGuess);\n        } else if (keyPressed === 'Enter' && !gameWon) {\n          checkGuess(currentGuess);\n        }\n      }\n    }\n  };\n\n  var resetGameState = function resetGameState() {\n    dispatch(setGuesses(_toConsumableArray(initialGuesses)));\n  };\n\n  var resetGame = function resetGame() {\n    var _lottieRef$current2;\n\n    (_lottieRef$current2 = lottieRef.current) == null ? void 0 : _lottieRef$current2.reset();\n    dispatch(setGameStarted(true));\n    resetGameState();\n    dispatch(setCurrentGuessIndex(0));\n    dispatch(setUsedKeys([]));\n    dispatch(setGameWon(false));\n    dispatch(setGameEnded(false));\n    dispatch(setSolution(answers()[Math.floor(Math.random() * answers().length)]));\n  };\n\n  if (!gameStarted) return _jsx(View, {\n    style: styles.newGameScreen,\n    children: _jsx(TouchableOpacity, {\n      onPress: resetGame,\n      children: _jsx(Text, {\n        style: {\n          color: 'white',\n          fontSize: 20\n        },\n        children: \"Start a new game\"\n      })\n    })\n  });\n  return _jsxs(View, {\n    style: {\n      position: 'relative',\n      alignContent: 'center',\n      borderWidth: 1,\n      borderColor: 'white'\n    },\n    children: [_jsx(TouchableOpacity, {\n      activeOpacity: 0.5,\n      style: styles.clueButton,\n      onPress: function onPress() {\n        return console.log('here');\n      },\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Clue\"\n      })\n    }), _jsx(GameBoard, {\n      solution: solution,\n      handleGuess: handleGuess,\n      resetGame: resetGame\n    }), _jsx(AnimatedLottieView, {\n      ref: lottieRef,\n      style: styles.lottieContainer,\n      source: require(\"../../lottie/confetti.json\")\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  lottieContainer: {\n    width: SIZE,\n    height: HEIGHT * 0.5,\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    zIndex: 10,\n    top: 20\n  },\n  newGameScreen: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  clueButton: {\n    width: '20%',\n    height: 100,\n    backgroundColor: 'gray',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 10,\n    borderColor: 'white',\n    marginBottom: -30\n  },\n  buttonText: {\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/screens/game/index.tsx"],"names":["useEffect","useRef","React","AnimatedLottieView","useAppSelector","useAppDispatch","setCurrentGuessIndex","setGameWon","setSolution","setGuesses","setUsedKeys","setGameEnded","setWrongGuessShake","setGameStarted","setGameLanguage","HEIGHT","initialGuesses","SIZE","getStoreData","answersEN","answersTR","wordsEN","wordsTR","GameBoard","Game","state","gameState","guesses","usedKeys","currentGuessIndex","gameStarted","gameEnded","gameWon","solution","gameLanguage","dispatch","lottieRef","wordList","concat","answers","handleFoundKeysOnKeyboard","guess","tempUsedKeys","letters","forEach","letter","idx","keyValue","matches","checkGameEnd","attemptsCount","filter","isComplete","length","updateGuess","keyPressed","currentGuess","currentGuessLetters","nextEmptyIndex","findIndex","lastNonEmptyIndex","updatedGuess","updatedGuesses","map","checkGuess","currentGuessedWord","join","isCorrect","setTimeout","current","play","includes","split","index","leftSlice","slice","countInLeft","item","totalCount","nonMatchingPairs","push","handleGuess","resetGameState","resetGame","reset","Math","floor","random","styles","newGameScreen","color","fontSize","position","alignContent","borderWidth","borderColor","clueButton","console","log","buttonText","lottieContainer","require","StyleSheet","create","width","height","backgroundColor","zIndex","top","flex","display","alignItems","justifyContent","alignSelf","marginBottom"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport React, { Component } from 'react';\r\n\r\nimport AnimatedLottieView from 'lottie-react-native';\r\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../hooks/storeHooks';\r\nimport {\r\n  setCurrentGuessIndex,\r\n  setGameWon,\r\n  setSolution,\r\n  setGuesses,\r\n  setUsedKeys,\r\n  setGameEnded,\r\n  setWrongGuessShake,\r\n  setGameStarted,\r\n  setGameLanguage,\r\n} from '../../store/slices/gameStateSlice';\r\nimport { guess, matchStatus } from '../../types';\r\nimport { HEIGHT, initialGuesses, SIZE } from '../../utils/constants';\r\nimport { getStoreData } from '../../utils/localStorageFuncs';\r\nimport { answersEN, answersTR, wordsEN, wordsTR } from '../../words';\r\nimport GameBoard from './components/gameBoard';\r\n\r\nexport default function Game() {\r\n  const {\r\n    guesses,\r\n    usedKeys,\r\n    currentGuessIndex,\r\n    gameStarted,\r\n    gameEnded,\r\n    gameWon,\r\n    solution,\r\n    gameLanguage,\r\n  } = useAppSelector((state) => state.gameState);\r\n  const dispatch = useAppDispatch();\r\n  (async () => {\r\n    const gameLanguage = (await getStoreData('language')) || 'en';\r\n    dispatch(setGameLanguage(gameLanguage));\r\n  })();\r\n\r\n  const lottieRef = useRef<AnimatedLottieView>(null);\r\n\r\n  //changing keyboard language\r\n\r\n  const wordList = () => {\r\n    switch (gameLanguage) {\r\n      case 'en':\r\n        return wordsEN.concat(answersEN);\r\n      case 'tr':\r\n        return wordsTR.concat(answersTR);\r\n      default:\r\n        return wordsEN.concat(answersEN);\r\n    }\r\n  };\r\n\r\n  const answers = (): string[] => {\r\n    switch (gameLanguage) {\r\n      case 'en':\r\n        return answersEN;\r\n      case 'tr':\r\n        return answersTR;\r\n      default:\r\n        return answersEN;\r\n    }\r\n  };\r\n\r\n  //passing keys when found and check the condition\r\n\r\n  const handleFoundKeysOnKeyboard = (guess: guess) => {\r\n    const tempUsedKeys = { ...usedKeys };\r\n    guess.letters.forEach((letter: string, idx: number) => {\r\n      const keyValue = tempUsedKeys[letter];\r\n      if (!keyValue) {\r\n        // eslint-disable-next-line\r\n        // @ts-ignore\r\n        tempUsedKeys[letter] = guess.matches[idx];\r\n      } else {\r\n        if (keyValue === 'correct') return;\r\n        else if (keyValue && guess.matches[idx] === 'correct') {\r\n          tempUsedKeys[letter] = 'correct';\r\n        } else if (keyValue === 'present' && guess.matches[idx] !== 'correct')\r\n          return;\r\n        // eslint-disable-next-line\r\n        // @ts-ignore\r\n        else tempUsedKeys[letter] = guess.matches[idx];\r\n      }\r\n    });\r\n    dispatch(setUsedKeys(tempUsedKeys));\r\n  };\r\n\r\n  const checkGameEnd = () => {\r\n    const attemptsCount = guesses.filter((guess: guess) => {\r\n      return guess.isComplete;\r\n    }).length;\r\n    if (attemptsCount === 6) {\r\n      dispatch(setGameEnded(true));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {}, [currentGuessIndex]);\r\n\r\n  const updateGuess = (keyPressed: string, currentGuess: guess) => {\r\n    const currentGuessLetters = [...currentGuess.letters];\r\n    let nextEmptyIndex = currentGuessLetters.findIndex(\r\n      (letter) => letter === ''\r\n    );\r\n    if (nextEmptyIndex === -1) nextEmptyIndex = 5;\r\n    const lastNonEmptyIndex = nextEmptyIndex - 1;\r\n    if (keyPressed !== '<' && keyPressed !== 'Enter' && nextEmptyIndex < 5) {\r\n      currentGuessLetters[nextEmptyIndex] = keyPressed;\r\n      const updatedGuess = { ...currentGuess, letters: currentGuessLetters };\r\n      const updatedGuesses = guesses.map((guess, idx) => {\r\n        if (idx === currentGuessIndex) return updatedGuess;\r\n        else return guess;\r\n      });\r\n      dispatch(setGuesses([...updatedGuesses]));\r\n    } else if (keyPressed === '<') {\r\n      currentGuessLetters[lastNonEmptyIndex] = '';\r\n      const updatedGuess = { ...currentGuess, letters: currentGuessLetters };\r\n      const updatedGuesses = guesses.map((guess, idx) => {\r\n        if (idx === currentGuessIndex) return updatedGuess;\r\n        else return guess;\r\n      });\r\n      dispatch(setGuesses([...updatedGuesses]));\r\n    }\r\n  };\r\n  //compare guess and update the guess\r\n  const checkGuess = (currentGuess: guess) => {\r\n    const currentGuessedWord = currentGuess.letters.join('');\r\n    if (currentGuessedWord.length === 5) {\r\n      if (currentGuessedWord === solution) {\r\n        const matches: matchStatus[] = [\r\n          'correct',\r\n          'correct',\r\n          'correct',\r\n          'correct',\r\n          'correct',\r\n        ];\r\n        const updatedGuess = {\r\n          ...currentGuess,\r\n          matches,\r\n          isComplete: true,\r\n          isCorrect: true,\r\n        };\r\n        const updatedGuesses = guesses.map((guess, idx) => {\r\n          if (idx === currentGuessIndex) return updatedGuess;\r\n          else return guess;\r\n        });\r\n        dispatch(setGuesses(updatedGuesses));\r\n        setTimeout(() => {\r\n          lottieRef.current?.play();\r\n          dispatch(setGameWon(true));\r\n          dispatch(setGameEnded(true));\r\n          handleFoundKeysOnKeyboard(updatedGuess);\r\n        }, 250 * 6);\r\n      } else if (wordList().includes(currentGuessedWord)) {\r\n        const matches: matchStatus[] = [];\r\n        currentGuessedWord.split('').forEach((letter, index) => {\r\n          const leftSlice = currentGuessedWord.slice(0, index + 1);\r\n          const countInLeft = leftSlice\r\n            .split('')\r\n            .filter((item) => item === letter).length;\r\n          const totalCount = solution\r\n            .split('')\r\n            .filter((item) => item === letter).length;\r\n          const nonMatchingPairs = solution\r\n            .split('')\r\n            .filter((item, idx) => currentGuessedWord[idx] !== item);\r\n\r\n          if (letter === solution[index]) {\r\n            matches.push('correct');\r\n          } else if (solution.includes(letter)) {\r\n            if (\r\n              countInLeft <= totalCount &&\r\n              nonMatchingPairs.includes(letter)\r\n            ) {\r\n              matches.push('present');\r\n            } else {\r\n              matches.push('absent');\r\n            }\r\n          } else {\r\n            matches.push('absent');\r\n          }\r\n        });\r\n\r\n        const updatedGuess = {\r\n          ...currentGuess,\r\n          matches,\r\n          isComplete: true,\r\n          isCorrect: false,\r\n        };\r\n\r\n        const updatedGuesses = guesses.map((guess, idx) => {\r\n          if (idx === currentGuessIndex) return updatedGuess;\r\n          else return guess;\r\n        });\r\n\r\n        dispatch(setGuesses(updatedGuesses));\r\n        dispatch(setCurrentGuessIndex(currentGuessIndex + 1));\r\n        handleFoundKeysOnKeyboard(updatedGuess);\r\n      } else {\r\n        dispatch(setWrongGuessShake(true));\r\n        setTimeout(() => {\r\n          dispatch(setWrongGuessShake(false));\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGuess = (keyPressed: string) => {\r\n    if (!gameEnded) {\r\n      const currentGuess = guesses[currentGuessIndex];\r\n      if (currentGuess) {\r\n        if (keyPressed !== 'Enter' && !currentGuess.isComplete) {\r\n          updateGuess(keyPressed, currentGuess);\r\n        } else if (keyPressed === 'Enter' && !gameWon) {\r\n          checkGuess(currentGuess);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  //changing the state of game to reset\r\n  const resetGameState = () => {\r\n    dispatch(setGuesses([...initialGuesses]));\r\n  };\r\n\r\n  const resetGame = () => {\r\n    lottieRef.current?.reset();\r\n    dispatch(setGameStarted(true));\r\n    resetGameState();\r\n    dispatch(setCurrentGuessIndex(0));\r\n    dispatch(setUsedKeys([]));\r\n    dispatch(setGameWon(false));\r\n    dispatch(setGameEnded(false));\r\n    dispatch(\r\n      setSolution(answers()[Math.floor(Math.random() * answers().length)])\r\n    );\r\n  };\r\n  if (!gameStarted)\r\n    return (\r\n      <View style={styles.newGameScreen}>\r\n        <TouchableOpacity onPress={resetGame}>\r\n          <Text style={{ color: 'white', fontSize: 20 }}>Start a new game</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  return (\r\n    <View\r\n      style={{\r\n        position: 'relative',\r\n        alignContent: 'center',\r\n        borderWidth: 1,\r\n        borderColor: 'white',\r\n      }}\r\n    >\r\n      <TouchableOpacity\r\n        activeOpacity={0.5}\r\n        style={styles.clueButton}\r\n        onPress={() => console.log('here')}\r\n      >\r\n        <Text style={styles.buttonText}>Clue</Text>\r\n      </TouchableOpacity>\r\n      <GameBoard\r\n        solution={solution}\r\n        handleGuess={handleGuess}\r\n        resetGame={resetGame}\r\n      />\r\n      <AnimatedLottieView\r\n        ref={lottieRef}\r\n        style={styles.lottieContainer}\r\n        source={require('../../lottie/confetti.json')}\r\n      />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  lottieContainer: {\r\n    width: SIZE,\r\n    height: HEIGHT * 0.5,\r\n    backgroundColor: 'transparent',\r\n    position: 'absolute',\r\n    zIndex: 10,\r\n    top: 20,\r\n  },\r\n  newGameScreen: {\r\n    flex: 1,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  clueButton: {\r\n    width: '20%',\r\n    height: 100,\r\n    backgroundColor: 'gray',\r\n    alignSelf: 'center',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    borderWidth: 10,\r\n    borderColor: 'white',\r\n    marginBottom: -30\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}