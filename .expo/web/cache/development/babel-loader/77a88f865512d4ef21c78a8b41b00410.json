{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Animated, { FadeIn, FadeOut } from 'react-native-reanimated';\nimport React, { useState } from 'react';\nimport { useAppSelector } from \"../../../hooks/storeHooks\";\nimport { adjustTextDisplay } from \"../../../utils/adjustLetterDisplay\";\nimport { colors, HEIGHT, SIZE } from \"../../../utils/constants\";\nimport Keyboard from \"./keyboard\";\nimport LetterSquare from \"./letterSquare\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar GameBoard = function GameBoard(_ref) {\n  var solution = _ref.solution,\n      handleGuess = _ref.handleGuess,\n      resetGame = _ref.resetGame;\n\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.gameState;\n  }),\n      guesses = _useAppSelector.guesses,\n      gameEnded = _useAppSelector.gameEnded,\n      wrongGuessShake = _useAppSelector.wrongGuessShake,\n      gameLanguage = _useAppSelector.gameLanguage;\n\n  var _useState = useState(gameEnded),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return _jsxs(View, {\n    style: styles.board,\n    children: [_jsx(View, {\n      style: styles.blocksContainer,\n      children: guesses.map(function (guess, idx) {\n        return _jsx(View, {\n          style: styles.squareBlock,\n          children: guess.letters.map(function (letter, idx) {\n            return _jsx(LetterSquare, {\n              idx: idx,\n              letter: letter,\n              guess: guess\n            }, idx);\n          })\n        }, idx);\n      })\n    }), _jsxs(View, {\n      style: styles.gameResult,\n      children: [gameEnded && _jsxs(View, {\n        style: {\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [_jsxs(View, {\n          style: {\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          children: [_jsxs(Text, {\n            style: styles.solutionText,\n            children: [\"Solution: \", adjustTextDisplay(solution, gameLanguage)]\n          }), _jsx(TouchableOpacity, {\n            style: styles.resetButton,\n            onPress: function onPress() {\n              return resetGame();\n            },\n            children: _jsx(Text, {\n              style: styles.resetButtonText,\n              children: \"New Game\"\n            })\n          })]\n        }), _jsx(Text, {\n          style: styles.solutionText,\n          children: \"definition: \"\n        })]\n      }), wrongGuessShake && _jsx(Animated.Text, {\n        entering: FadeIn,\n        exiting: FadeOut,\n        style: styles.wrongGuessText,\n        children: \"Not in word list\"\n      })]\n    }), _jsx(Keyboard, {\n      handleGuess: handleGuess\n    })]\n  });\n};\n\nexport default GameBoard;\nvar styles = StyleSheet.create({\n  board: {\n    width: SIZE,\n    height: HEIGHT,\n    backgroundColor: colors.bg,\n    alignItems: 'center',\n    marginTop: 50\n  },\n  squareBlock: {\n    width: SIZE * 0.9,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly',\n    marginBottom: 10\n  },\n  blocksContainer: {\n    width: SIZE * 0.9,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'space-evenly'\n  },\n  gameResult: {\n    width: SIZE,\n    height: 50,\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-evenly'\n  },\n  resetButton: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 170,\n    height: 40,\n    borderRadius: 10,\n    backgroundColor: '#404040'\n  },\n  resetButtonText: {\n    fontFamily: 'Montserrat_700Bold',\n    fontSize: 20,\n    color: '#fff'\n  },\n  solutionText: {\n    fontSize: 16,\n    fontFamily: 'Montserrat_600SemiBold',\n    color: '#fff',\n    textTransform: 'uppercase'\n  },\n  wrongGuessText: {\n    fontFamily: 'Montserrat_600SemiBold',\n    fontSize: 16,\n    color: colors.white\n  },\n  modal: {\n    width: '50%',\n    height: '25%',\n    backgroundColor: 'white',\n    alignSelf: 'center'\n  }\n});","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/screens/game/components/gameBoard.tsx"],"names":["Animated","FadeIn","FadeOut","React","useState","useAppSelector","adjustTextDisplay","colors","HEIGHT","SIZE","Keyboard","LetterSquare","GameBoard","solution","handleGuess","resetGame","state","gameState","guesses","gameEnded","wrongGuessShake","gameLanguage","modalVisible","setModalVisible","styles","board","blocksContainer","map","guess","idx","squareBlock","letters","letter","gameResult","display","flexDirection","solutionText","resetButton","resetButtonText","wrongGuessText","StyleSheet","create","width","height","backgroundColor","bg","alignItems","marginTop","justifyContent","marginBottom","borderRadius","fontFamily","fontSize","color","textTransform","white","modal","alignSelf"],"mappings":"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","sourcesContent":["import { View, Text, StyleSheet, TouchableOpacity, Modal } from 'react-native';\r\n// eslint-disable-next-line\r\nimport Animated, { FadeIn, FadeOut } from 'react-native-reanimated';\r\n\r\nimport React, { Component, useState } from 'react';\r\n\r\nimport { useAppSelector } from '../../../hooks/storeHooks';\r\nimport { adjustTextDisplay } from '../../../utils/adjustLetterDisplay';\r\nimport { colors, HEIGHT, SIZE } from '../../../utils/constants';\r\n\r\n//imported keyboard and letter square components\r\n\r\nimport Keyboard from './keyboard';\r\nimport LetterSquare from './letterSquare';\r\n\r\ninterface GameBoardProps {\r\n  solution: string;\r\n  handleGuess: (keyPressed: string) => void;\r\n  resetGame: () => void;\r\n}\r\n//function handle the state (guess, gameended ,gamelanguage)\r\nconst GameBoard = ({ solution, handleGuess, resetGame }: GameBoardProps) => {\r\n  const { guesses, gameEnded, wrongGuessShake, gameLanguage } = useAppSelector(\r\n    (state) => state.gameState\r\n  );\r\n  const [modalVisible, setModalVisible] = useState(gameEnded);\r\n\r\n  return (\r\n    <View style={styles.board}>\r\n      <View style={styles.blocksContainer}>\r\n        {guesses.map((guess, idx) => (\r\n          <View key={idx} style={styles.squareBlock}>\r\n            {guess.letters.map((letter, idx) => {\r\n              return (\r\n                <LetterSquare\r\n                  key={idx}\r\n                  idx={idx}\r\n                  letter={letter}\r\n                  guess={guess}\r\n                />\r\n              );\r\n            })}\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      <View style={styles.gameResult}>\r\n        {gameEnded && (\r\n          <View style={{display:'flex', flexDirection: 'column'}}>\r\n            <View style={{display:'flex', flexDirection: 'column'}}>              \r\n              <Text style={styles.solutionText}>\r\n                Solution: {adjustTextDisplay(solution, gameLanguage)}\r\n              </Text>\r\n              <TouchableOpacity\r\n                style={styles.resetButton}\r\n                onPress={() => resetGame()}\r\n              >\r\n                <Text style={styles.resetButtonText}>New Game</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n            <Text style={styles.solutionText}>definition: </Text>\r\n          </View>\r\n        )}\r\n        {wrongGuessShake && (\r\n          <Animated.Text\r\n            entering={FadeIn}\r\n            exiting={FadeOut}\r\n            style={styles.wrongGuessText}\r\n          >\r\n            Not in word list\r\n          </Animated.Text>\r\n        )}\r\n      </View>\r\n      <Keyboard handleGuess={handleGuess} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default GameBoard;\r\n\r\nconst styles = StyleSheet.create({\r\n  board: {\r\n    width: SIZE,\r\n    height: HEIGHT,\r\n    backgroundColor: colors.bg,\r\n    alignItems: 'center',\r\n\r\n    marginTop: 50,\r\n  },\r\n  squareBlock: {\r\n    width: SIZE * 0.9,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-evenly',\r\n    marginBottom: 10,\r\n  },\r\n  blocksContainer: {\r\n    width: SIZE * 0.9,\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  gameResult: {\r\n    width: SIZE,\r\n    height: 50,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-evenly',\r\n  },\r\n  resetButton: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: 170,\r\n    height: 40,\r\n    borderRadius: 10,\r\n    backgroundColor: '#404040',\r\n  },\r\n  resetButtonText: {\r\n    fontFamily: 'Montserrat_700Bold',\r\n    fontSize: 20,\r\n    color: '#fff',\r\n  },\r\n  solutionText: {\r\n    fontSize: 16,\r\n    fontFamily: 'Montserrat_600SemiBold',\r\n    color: '#fff',\r\n    textTransform: 'uppercase',\r\n  },\r\n  wrongGuessText: {\r\n    fontFamily: 'Montserrat_600SemiBold',\r\n    fontSize: 16,\r\n    color: colors.white,\r\n  },\r\n  modal: {\r\n    width: '50%',\r\n    height: '25%',\r\n    backgroundColor: 'white',\r\n    alignSelf: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}