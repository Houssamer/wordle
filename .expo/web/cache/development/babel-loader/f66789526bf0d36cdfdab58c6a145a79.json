{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useRef, useState } from 'react';\nimport React from 'react';\nimport AnimatedLottieView from 'lottie-react-native';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport axios from \"../../axios/Axios\";\nimport { useAppSelector, useAppDispatch } from \"../../hooks/storeHooks\";\nimport { setCurrentGuessIndex, setGameWon, setSolution, setGuesses, setUsedKeys, setGameEnded, setWrongGuessShake, setGameStarted, setGameLanguage } from \"../../store/slices/gameStateSlice\";\nimport { HEIGHT, initialGuesses, SIZE } from \"../../utils/constants\";\nimport { getStoreData } from \"../../utils/localStorageFuncs\";\nimport { answersEN, answersTR, wordsEN, wordsTR } from \"../../words\";\nimport GameBoard from \"./components/gameBoard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Game() {\n  var _useAppSelector = useAppSelector(function (state) {\n    return state.gameState;\n  }),\n      guesses = _useAppSelector.guesses,\n      usedKeys = _useAppSelector.usedKeys,\n      currentGuessIndex = _useAppSelector.currentGuessIndex,\n      gameStarted = _useAppSelector.gameStarted,\n      gameEnded = _useAppSelector.gameEnded,\n      gameWon = _useAppSelector.gameWon,\n      solution = _useAppSelector.solution,\n      gameLanguage = _useAppSelector.gameLanguage;\n\n  var dispatch = useAppDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      wordType = _useState4[0],\n      setWordType = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      wordDefinition = _useState6[0],\n      setWordDefinition = _useState6[1];\n\n  (function _callee() {\n    var gameLanguage;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getStoreData('language'));\n\n          case 2:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.t0 = 'en';\n\n          case 5:\n            gameLanguage = _context.t0;\n            dispatch(setGameLanguage(gameLanguage));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  })();\n\n  var lottieRef = useRef(null);\n\n  var wordList = function wordList() {\n    switch (gameLanguage) {\n      case 'en':\n        return wordsEN.concat(answersEN);\n\n      case 'tr':\n        return wordsTR.concat(answersTR);\n\n      default:\n        return wordsEN.concat(answersEN);\n    }\n  };\n\n  var answers = function answers() {\n    switch (gameLanguage) {\n      case 'en':\n        return answersEN;\n\n      case 'tr':\n        return answersTR;\n\n      default:\n        return answersEN;\n    }\n  };\n\n  var handleFoundKeysOnKeyboard = function handleFoundKeysOnKeyboard(guess) {\n    var tempUsedKeys = _objectSpread({}, usedKeys);\n\n    guess.letters.forEach(function (letter, idx) {\n      var keyValue = tempUsedKeys[letter];\n\n      if (!keyValue) {\n        tempUsedKeys[letter] = guess.matches[idx];\n      } else {\n        if (keyValue === 'correct') return;else if (keyValue && guess.matches[idx] === 'correct') {\n          tempUsedKeys[letter] = 'correct';\n        } else if (keyValue === 'present' && guess.matches[idx] !== 'correct') return;else tempUsedKeys[letter] = guess.matches[idx];\n      }\n    });\n    dispatch(setUsedKeys(tempUsedKeys));\n  };\n\n  var checkGameEnd = function checkGameEnd() {\n    var attemptsCount = guesses.filter(function (guess) {\n      return guess.isComplete;\n    }).length;\n\n    if (attemptsCount === 6) {\n      dispatch(setGameEnded(true));\n    }\n  };\n\n  useEffect(function () {}, [currentGuessIndex]);\n\n  var updateGuess = function updateGuess(keyPressed, currentGuess) {\n    var currentGuessLetters = _toConsumableArray(currentGuess.letters);\n\n    var nextEmptyIndex = currentGuessLetters.findIndex(function (letter) {\n      return letter === '';\n    });\n    if (nextEmptyIndex === -1) nextEmptyIndex = 5;\n    var lastNonEmptyIndex = nextEmptyIndex - 1;\n\n    if (keyPressed !== '<' && keyPressed !== 'Enter' && nextEmptyIndex < 5) {\n      currentGuessLetters[nextEmptyIndex] = keyPressed;\n\n      var updatedGuess = _objectSpread(_objectSpread({}, currentGuess), {}, {\n        letters: currentGuessLetters\n      });\n\n      var updatedGuesses = guesses.map(function (guess, idx) {\n        if (idx === currentGuessIndex) return updatedGuess;else return guess;\n      });\n      dispatch(setGuesses(_toConsumableArray(updatedGuesses)));\n    } else if (keyPressed === '<') {\n      currentGuessLetters[lastNonEmptyIndex] = '';\n\n      var _updatedGuess = _objectSpread(_objectSpread({}, currentGuess), {}, {\n        letters: currentGuessLetters\n      });\n\n      var _updatedGuesses = guesses.map(function (guess, idx) {\n        if (idx === currentGuessIndex) return _updatedGuess;else return guess;\n      });\n\n      dispatch(setGuesses(_toConsumableArray(_updatedGuesses)));\n    }\n  };\n\n  var checkGuess = function checkGuess(currentGuess) {\n    var currentGuessedWord = currentGuess.letters.join('');\n\n    if (currentGuessedWord.length === 5) {\n      if (currentGuessedWord === solution) {\n        var matches = ['correct', 'correct', 'correct', 'correct', 'correct'];\n\n        var updatedGuess = _objectSpread(_objectSpread({}, currentGuess), {}, {\n          matches: matches,\n          isComplete: true,\n          isCorrect: true\n        });\n\n        var updatedGuesses = guesses.map(function (guess, idx) {\n          if (idx === currentGuessIndex) return updatedGuess;else return guess;\n        });\n        dispatch(setGuesses(updatedGuesses));\n        setTimeout(function () {\n          var _lottieRef$current;\n\n          (_lottieRef$current = lottieRef.current) == null ? void 0 : _lottieRef$current.play();\n          dispatch(setGameWon(true));\n          dispatch(setGameEnded(true));\n          handleFoundKeysOnKeyboard(updatedGuess);\n        }, 250 * 6);\n      } else if (wordList().includes(currentGuessedWord)) {\n        var _matches = [];\n        currentGuessedWord.split('').forEach(function (letter, index) {\n          var leftSlice = currentGuessedWord.slice(0, index + 1);\n          var countInLeft = leftSlice.split('').filter(function (item) {\n            return item === letter;\n          }).length;\n          var totalCount = solution.split('').filter(function (item) {\n            return item === letter;\n          }).length;\n          var nonMatchingPairs = solution.split('').filter(function (item, idx) {\n            return currentGuessedWord[idx] !== item;\n          });\n\n          if (letter === solution[index]) {\n            _matches.push('correct');\n          } else if (solution.includes(letter)) {\n            if (countInLeft <= totalCount && nonMatchingPairs.includes(letter)) {\n              _matches.push('present');\n            } else {\n              _matches.push('absent');\n            }\n          } else {\n            _matches.push('absent');\n          }\n        });\n\n        var _updatedGuess2 = _objectSpread(_objectSpread({}, currentGuess), {}, {\n          matches: _matches,\n          isComplete: true,\n          isCorrect: false\n        });\n\n        var _updatedGuesses2 = guesses.map(function (guess, idx) {\n          if (idx === currentGuessIndex) return _updatedGuess2;else return guess;\n        });\n\n        dispatch(setGuesses(_updatedGuesses2));\n        dispatch(setCurrentGuessIndex(currentGuessIndex + 1));\n        handleFoundKeysOnKeyboard(_updatedGuess2);\n      } else {\n        dispatch(setWrongGuessShake(true));\n        setTimeout(function () {\n          dispatch(setWrongGuessShake(false));\n        }, 1000);\n      }\n    }\n  };\n\n  var handleGuess = function handleGuess(keyPressed) {\n    if (!gameEnded) {\n      var currentGuess = guesses[currentGuessIndex];\n\n      if (currentGuess) {\n        if (keyPressed !== 'Enter' && !currentGuess.isComplete) {\n          updateGuess(keyPressed, currentGuess);\n        } else if (keyPressed === 'Enter' && !gameWon) {\n          checkGuess(currentGuess);\n        }\n      }\n    }\n  };\n\n  var resetGameState = function resetGameState() {\n    dispatch(setGuesses(_toConsumableArray(initialGuesses)));\n  };\n\n  var clue = function clue() {\n    console.log(solution);\n    axios.get(solution).then(function (res) {\n      setWordType(res.data[0].meanings[0].partOfSpeech);\n      setModalVisible(true);\n    });\n  };\n\n  var resetGame = function resetGame() {\n    var _lottieRef$current2;\n\n    (_lottieRef$current2 = lottieRef.current) == null ? void 0 : _lottieRef$current2.reset();\n    dispatch(setGameStarted(true));\n    resetGameState();\n    dispatch(setCurrentGuessIndex(0));\n    dispatch(setUsedKeys([]));\n    dispatch(setGameWon(false));\n    dispatch(setGameEnded(false));\n    dispatch(setSolution(answers()[Math.floor(Math.random() * answers().length)]));\n  };\n\n  if (!gameStarted) return _jsx(View, {\n    style: styles.newGameScreen,\n    children: _jsx(TouchableOpacity, {\n      onPress: resetGame,\n      children: _jsx(Text, {\n        style: {\n          color: 'white',\n          fontSize: 20\n        },\n        children: \"Start a new game\"\n      })\n    })\n  });\n  return _jsxs(View, {\n    style: {\n      position: 'relative',\n      alignContent: 'center',\n      flex: 1\n    },\n    children: [_jsx(TouchableOpacity, {\n      activeOpacity: 0.5,\n      style: styles.clueButton,\n      onPress: clue,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Clue\"\n      })\n    }), _jsx(GameBoard, {\n      solution: solution,\n      handleGuess: handleGuess,\n      resetGame: resetGame,\n      wordDefinition: wordDefinition\n    }), _jsx(AnimatedLottieView, {\n      ref: lottieRef,\n      style: styles.lottieContainer,\n      source: require(\"../../lottie/confetti.json\")\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        setModalVisible(false);\n      },\n      children: _jsxs(View, {\n        style: styles.modal,\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return setModalVisible(false);\n          },\n          children: _jsx(Text, {\n            children: \"Close\"\n          })\n        }), _jsxs(Text, {\n          children: [\"The type of the solution is \", wordType && wordType]\n        })]\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  lottieContainer: {\n    width: SIZE,\n    height: HEIGHT * 0.5,\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    zIndex: 10,\n    top: 20\n  },\n  newGameScreen: {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  clueButton: {\n    width: '30%',\n    height: 25,\n    backgroundColor: 'gray',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: -35,\n    marginTop: 35,\n    zIndex: 12,\n    borderRadius: 15\n  },\n  buttonText: {\n    color: 'white'\n  },\n  modal: {\n    width: '50%',\n    height: '25%',\n    backgroundColor: 'white',\n    alignSelf: 'center'\n  }\n});","map":{"version":3,"sources":["D:/fiverr/projet15/wordle/src/screens/game/index.tsx"],"names":["useEffect","useRef","useState","React","AnimatedLottieView","axios","useAppSelector","useAppDispatch","setCurrentGuessIndex","setGameWon","setSolution","setGuesses","setUsedKeys","setGameEnded","setWrongGuessShake","setGameStarted","setGameLanguage","HEIGHT","initialGuesses","SIZE","getStoreData","answersEN","answersTR","wordsEN","wordsTR","GameBoard","Game","state","gameState","guesses","usedKeys","currentGuessIndex","gameStarted","gameEnded","gameWon","solution","gameLanguage","dispatch","modalVisible","setModalVisible","wordType","setWordType","wordDefinition","setWordDefinition","lottieRef","wordList","concat","answers","handleFoundKeysOnKeyboard","guess","tempUsedKeys","letters","forEach","letter","idx","keyValue","matches","checkGameEnd","attemptsCount","filter","isComplete","length","updateGuess","keyPressed","currentGuess","currentGuessLetters","nextEmptyIndex","findIndex","lastNonEmptyIndex","updatedGuess","updatedGuesses","map","checkGuess","currentGuessedWord","join","isCorrect","setTimeout","current","play","includes","split","index","leftSlice","slice","countInLeft","item","totalCount","nonMatchingPairs","push","handleGuess","resetGameState","clue","console","log","get","then","res","data","meanings","partOfSpeech","resetGame","reset","Math","floor","random","styles","newGameScreen","color","fontSize","position","alignContent","flex","clueButton","buttonText","lottieContainer","require","modal","StyleSheet","create","width","height","backgroundColor","zIndex","top","display","alignItems","justifyContent","alignSelf","marginBottom","marginTop","borderRadius"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport React, { Component } from 'react';\r\n\r\nimport AnimatedLottieView from 'lottie-react-native';\r\nimport { Modal, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\r\nimport axios from '../../axios/Axios';\r\n\r\nimport { useAppSelector, useAppDispatch } from '../../hooks/storeHooks';\r\nimport {\r\n  setCurrentGuessIndex,\r\n  setGameWon,\r\n  setSolution,\r\n  setGuesses,\r\n  setUsedKeys,\r\n  setGameEnded,\r\n  setWrongGuessShake,\r\n  setGameStarted,\r\n  setGameLanguage,\r\n} from '../../store/slices/gameStateSlice';\r\nimport { guess, matchStatus } from '../../types';\r\nimport { HEIGHT, initialGuesses, SIZE } from '../../utils/constants';\r\nimport { getStoreData } from '../../utils/localStorageFuncs';\r\nimport { answersEN, answersTR, wordsEN, wordsTR } from '../../words';\r\nimport GameBoard from './components/gameBoard';\r\n\r\nexport default function Game() {\r\n  const {\r\n    guesses,\r\n    usedKeys,\r\n    currentGuessIndex,\r\n    gameStarted,\r\n    gameEnded,\r\n    gameWon,\r\n    solution,\r\n    gameLanguage,\r\n  } = useAppSelector((state) => state.gameState);\r\n  const dispatch = useAppDispatch();\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [wordType, setWordType] = useState('');\r\n  const [wordDefinition, setWordDefinition] = useState('');\r\n  (async () => {\r\n    const gameLanguage = (await getStoreData('language')) || 'en';\r\n    dispatch(setGameLanguage(gameLanguage));\r\n  })();\r\n\r\n  const lottieRef = useRef<AnimatedLottieView>(null);\r\n\r\n  //changing keyboard language\r\n\r\n  const wordList = () => {\r\n    switch (gameLanguage) {\r\n      case 'en':\r\n        return wordsEN.concat(answersEN);\r\n      case 'tr':\r\n        return wordsTR.concat(answersTR);\r\n      default:\r\n        return wordsEN.concat(answersEN);\r\n    }\r\n  };\r\n\r\n  const answers = (): string[] => {\r\n    switch (gameLanguage) {\r\n      case 'en':\r\n        return answersEN;\r\n      case 'tr':\r\n        return answersTR;\r\n      default:\r\n        return answersEN;\r\n    }\r\n  };\r\n\r\n  //passing keys when found and check the condition\r\n\r\n  const handleFoundKeysOnKeyboard = (guess: guess) => {\r\n    const tempUsedKeys = { ...usedKeys };\r\n    guess.letters.forEach((letter: string, idx: number) => {\r\n      const keyValue = tempUsedKeys[letter];\r\n      if (!keyValue) {\r\n        // eslint-disable-next-line\r\n        // @ts-ignore\r\n        tempUsedKeys[letter] = guess.matches[idx];\r\n      } else {\r\n        if (keyValue === 'correct') return;\r\n        else if (keyValue && guess.matches[idx] === 'correct') {\r\n          tempUsedKeys[letter] = 'correct';\r\n        } else if (keyValue === 'present' && guess.matches[idx] !== 'correct')\r\n          return;\r\n        // eslint-disable-next-line\r\n        // @ts-ignore\r\n        else tempUsedKeys[letter] = guess.matches[idx];\r\n      }\r\n    });\r\n    dispatch(setUsedKeys(tempUsedKeys));\r\n  };\r\n\r\n  const checkGameEnd = () => {\r\n    const attemptsCount = guesses.filter((guess: guess) => {\r\n      return guess.isComplete;\r\n    }).length;\r\n    if (attemptsCount === 6) {\r\n      dispatch(setGameEnded(true));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {}, [currentGuessIndex]);\r\n\r\n  const updateGuess = (keyPressed: string, currentGuess: guess) => {\r\n    const currentGuessLetters = [...currentGuess.letters];\r\n    let nextEmptyIndex = currentGuessLetters.findIndex(\r\n      (letter) => letter === ''\r\n    );\r\n    if (nextEmptyIndex === -1) nextEmptyIndex = 5;\r\n    const lastNonEmptyIndex = nextEmptyIndex - 1;\r\n    if (keyPressed !== '<' && keyPressed !== 'Enter' && nextEmptyIndex < 5) {\r\n      currentGuessLetters[nextEmptyIndex] = keyPressed;\r\n      const updatedGuess = { ...currentGuess, letters: currentGuessLetters };\r\n      const updatedGuesses = guesses.map((guess, idx) => {\r\n        if (idx === currentGuessIndex) return updatedGuess;\r\n        else return guess;\r\n      });\r\n      dispatch(setGuesses([...updatedGuesses]));\r\n    } else if (keyPressed === '<') {\r\n      currentGuessLetters[lastNonEmptyIndex] = '';\r\n      const updatedGuess = { ...currentGuess, letters: currentGuessLetters };\r\n      const updatedGuesses = guesses.map((guess, idx) => {\r\n        if (idx === currentGuessIndex) return updatedGuess;\r\n        else return guess;\r\n      });\r\n      dispatch(setGuesses([...updatedGuesses]));\r\n    }\r\n  };\r\n  //compare guess and update the guess\r\n  const checkGuess = (currentGuess: guess) => {\r\n    const currentGuessedWord = currentGuess.letters.join('');\r\n    if (currentGuessedWord.length === 5) {\r\n      if (currentGuessedWord === solution) {\r\n        const matches: matchStatus[] = [\r\n          'correct',\r\n          'correct',\r\n          'correct',\r\n          'correct',\r\n          'correct',\r\n        ];\r\n        const updatedGuess = {\r\n          ...currentGuess,\r\n          matches,\r\n          isComplete: true,\r\n          isCorrect: true,\r\n        };\r\n        const updatedGuesses = guesses.map((guess, idx) => {\r\n          if (idx === currentGuessIndex) return updatedGuess;\r\n          else return guess;\r\n        });\r\n        dispatch(setGuesses(updatedGuesses));\r\n        setTimeout(() => {\r\n          lottieRef.current?.play();\r\n          dispatch(setGameWon(true));\r\n          dispatch(setGameEnded(true));\r\n          handleFoundKeysOnKeyboard(updatedGuess);\r\n        }, 250 * 6);\r\n      } else if (wordList().includes(currentGuessedWord)) {\r\n        const matches: matchStatus[] = [];\r\n        currentGuessedWord.split('').forEach((letter, index) => {\r\n          const leftSlice = currentGuessedWord.slice(0, index + 1);\r\n          const countInLeft = leftSlice\r\n            .split('')\r\n            .filter((item) => item === letter).length;\r\n          const totalCount = solution\r\n            .split('')\r\n            .filter((item) => item === letter).length;\r\n          const nonMatchingPairs = solution\r\n            .split('')\r\n            .filter((item, idx) => currentGuessedWord[idx] !== item);\r\n\r\n          if (letter === solution[index]) {\r\n            matches.push('correct');\r\n          } else if (solution.includes(letter)) {\r\n            if (\r\n              countInLeft <= totalCount &&\r\n              nonMatchingPairs.includes(letter)\r\n            ) {\r\n              matches.push('present');\r\n            } else {\r\n              matches.push('absent');\r\n            }\r\n          } else {\r\n            matches.push('absent');\r\n          }\r\n        });\r\n\r\n        const updatedGuess = {\r\n          ...currentGuess,\r\n          matches,\r\n          isComplete: true,\r\n          isCorrect: false,\r\n        };\r\n\r\n        const updatedGuesses = guesses.map((guess, idx) => {\r\n          if (idx === currentGuessIndex) return updatedGuess;\r\n          else return guess;\r\n        });\r\n\r\n        dispatch(setGuesses(updatedGuesses));\r\n        dispatch(setCurrentGuessIndex(currentGuessIndex + 1));\r\n        handleFoundKeysOnKeyboard(updatedGuess);\r\n      } else {\r\n        dispatch(setWrongGuessShake(true));\r\n        setTimeout(() => {\r\n          dispatch(setWrongGuessShake(false));\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGuess = (keyPressed: string) => {\r\n    if (!gameEnded) {\r\n      const currentGuess = guesses[currentGuessIndex];\r\n      if (currentGuess) {\r\n        if (keyPressed !== 'Enter' && !currentGuess.isComplete) {\r\n          updateGuess(keyPressed, currentGuess);\r\n        } else if (keyPressed === 'Enter' && !gameWon) {\r\n          checkGuess(currentGuess);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  //changing the state of game to reset\r\n  const resetGameState = () => {\r\n    dispatch(setGuesses([...initialGuesses]));\r\n  };\r\n\r\n  const clue = () => {\r\n    console.log(solution);\r\n\r\n    axios.get(solution).then((res) => {\r\n      setWordType(res.data[0].meanings[0].partOfSpeech);\r\n      setModalVisible(true);\r\n    });\r\n  };\r\n\r\n  const resetGame = () => {\r\n    lottieRef.current?.reset();\r\n    dispatch(setGameStarted(true));\r\n    resetGameState();\r\n    dispatch(setCurrentGuessIndex(0));\r\n    dispatch(setUsedKeys([]));\r\n    dispatch(setGameWon(false));\r\n    dispatch(setGameEnded(false));\r\n    dispatch(\r\n      setSolution(answers()[Math.floor(Math.random() * answers().length)])\r\n    );\r\n    \r\n  };\r\n  if (!gameStarted)\r\n    return (\r\n      <View style={styles.newGameScreen}>\r\n        <TouchableOpacity onPress={resetGame}>\r\n          <Text style={{ color: 'white', fontSize: 20 }}>Start a new game</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  return (\r\n    <View\r\n      style={{\r\n        position: 'relative',\r\n        alignContent: 'center',\r\n        flex: 1,\r\n      }}\r\n    >\r\n      <TouchableOpacity\r\n        activeOpacity={0.5}\r\n        style={styles.clueButton}\r\n        onPress={clue}\r\n      >\r\n        <Text style={styles.buttonText}>Clue</Text>\r\n      </TouchableOpacity>\r\n      <GameBoard\r\n        solution={solution}\r\n        handleGuess={handleGuess}\r\n        resetGame={resetGame}\r\n        wordDefinition={wordDefinition}\r\n      />\r\n      <AnimatedLottieView\r\n        ref={lottieRef}\r\n        style={styles.lottieContainer}\r\n        source={require('../../lottie/confetti.json')}\r\n      />\r\n      <Modal\r\n        animationType='slide'\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          setModalVisible(false);\r\n        }}\r\n      >\r\n        <View style={styles.modal}>\r\n          <TouchableOpacity onPress={() => setModalVisible(false)}>\r\n            <Text>Close</Text>\r\n          </TouchableOpacity>\r\n\r\n          <Text>The type of the solution is {wordType && wordType}</Text>\r\n        </View>\r\n      </Modal>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  lottieContainer: {\r\n    width: SIZE,\r\n    height: HEIGHT * 0.5,\r\n    backgroundColor: 'transparent',\r\n    position: 'absolute',\r\n    zIndex: 10,\r\n    top: 20,\r\n  },\r\n  newGameScreen: {\r\n    flex: 1,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  clueButton: {\r\n    width: '30%',\r\n    height: 25,\r\n    backgroundColor: 'gray',\r\n    alignSelf: 'center',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    marginBottom: -35,\r\n    marginTop: 35,\r\n    zIndex: 12,\r\n    borderRadius: 15,\r\n  },\r\n  buttonText: {\r\n    color: 'white',\r\n  },\r\n  modal: {\r\n    width: '50%',\r\n    height: '25%',\r\n    backgroundColor: 'white',\r\n    alignSelf: 'center',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}